!<arch>
0-isupper.c/    0           0     0     644     227       `
#include "main.h"
#include <stdio.h>

/**
* _isupper - checks for uppercase character
* @c: Variable text
* Return: Always 0.
*/

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}

0-memset.c/     0           0     0     644     325       `
#include "main.h"

/**
 * _memset - function that fills memory with a constant byte.
 * @s: pointer
 * @b: char variable
 * @n: unsigned int variable
 *
 * Return: a pointer to the memory area s.
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int  p;

	for (p = 0; p < n; p++)
		*(s + p) = b;

	return (s);
}

0-strcat.c/     0           0     0     644     335       `
#include "main.h"
#include <string.h>
/**
 * _strcat - a function that concatenates two strings.
 * @dest: variable
 * @src: variable
 *
 * Return: dest
 */
char *_strcat(char *dest, char *src)
{
	char *ptr = dest;

	while (*ptr != '\0')
	{
		ptr++;
	}

	while (*src != '\0')
	{
		*ptr++ = *src++;
	}

	*ptr = '\0';

	return (dest);
}

100-atoi.c/     0           0     0     644     569       `
#include "main.h"

/**
 * _atoi - convert a string to an integer.
 * @s: string to be converted
 *
 * Return: integer
 */
int _atoi(char *s)
{
	int i, d, n, len, f, digit;

	i = 0;
	d = 0;
	n = 0;
	len = 0;
	f = 0;
	digit = 0;

	while (s[len] != '\0')
		len++;

	while (i < len && f == 0)
	{
		if (s[i] == '-')
			++d;

		if (s[i] >= '0' && s[i] <= '9')
		{
			digit = s[i] - '0';
			if (d % 2)
				digit = -digit;
			n = n * 10 + digit;
			f = 1;
			if (s[i + 1] < '0' || s[i + 1] > '9')
				break;
			f = 0;
		}
		i++;
	}

	if (f == 0)
		return (0);

	return (n);
}


1-isdigit.c/    0           0     0     644     231       `
#include "main.h"

/**
* _isdigit - function that check if it's a digit
* @c: takes in a character/digit
* Return: 1 if digit and 0 if anything else
*/

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	return (0);
}

1-memcpy.c/     0           0     0     644     353       `
#include "main.h"

/**
 * _memcpy - a function that copies memory area.
 * @dest: destination memory area.
 * @src: source memory area
 * @n: memeory area to be copied.
 *
 * Return: a pointer to dest.
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int  p;

	for (p = 0; p < n; p++)
		*(dest + p) = *(src + p);

	return (dest);
}


1-strncat.c/    0           0     0     644     405       `
#include "main.h"

/**
 * _strncat - a function that concatenates two strings.
 * @dest: destination.
 * @src: source.
 * @n: number of character to concentracte.
 *
 * Return: dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int m, o;

	m = 0;
	o = 0;

	while (dest[m] != '\0')
		m++;

	while (src[o] != '\0' && o < n)
	{
		dest[m] = src[o];
		m++;
		o++;
	}

	dest[m] = '\0';

	return (dest);
}

2-strchr.c/     0           0     0     644     427       `
#include "main.h"

/**
 * _strchr -  function that locates a character in a string.
 * @s: string
 * @c: character
 *
 * Return: a pointer to the first occurrence of the character
 * c in the string s, or NULL if the character is not found
 */
char *_strchr(char *s, char c)
{
	unsigned int p = 0;

	for (; *(s + p) != '\0'; p++)
		if (*(s + p) == c)
			return (s + p);
	if (*(s + p) == c)
		return (s + p);
	return ('\0');

}

2-strlen.c/     0           0     0     644     210       `
#include "main.h"

/**
 * _strlen -  returns the length of a string.
 * @s: int variable.
 *
 * Return: Always 0.
 */
int _strlen(char *s)
{
	int n;

	n = 0;

	while (s[n] != '\0')
	{
		n++;
	}

	return (n);
}
2-strncpy.c/    0           0     0     644     344       `
#include "main.h"

/**
 * _strncpy - a function that copies a string.
 * @dest: destination
 * @src: source
 * @n: string to be copied.
 * Return: dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int u;

	for (u = 0; u < n && src[u] != '\0'; u++)
	{
		dest[u] = src[u];
	}
	for (; u < n; u++)
	{
		dest[u] = '\0';
	}
	return (dest);
}

3-islower.c/    0           0     0     644     255       `
#include "main.h"

/**
 * _islower - function that checks for lowercase character
 * @c: is the int that will use for the argument of the function
 * Return: 0
 */
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	else
		return (0);
}

3-puts.c/       0           0     0     644     225       `
#include "main.h"

/**
 * _puts - prints a string.
 * @str: char typr argument.
 *
 * Return: null.
 */
void _puts(char *str)
{
	int len = 0;

	while (str[len] != '\0')
	{
		_putchar(str[len]);
		len++;
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     252       `
#include "main.h"

/**
 * _strcmp - a function that compares two strings.
 * @s1: string
 * @s2: string
 *
 * Return: 1, 0 or less than 0.
 */
int _strcmp(char *s1, char *s2)
{
	while (*s1 && (*s1 == *s2))
	{
		s1++;
		s2++;
	}
	return (*s1 - *s2);
}

3-strspn.c/     0           0     0     644     480       `
#include "main.h"

/**
 * _strspn -  a function that gets the length of a prefix substring
 * @s: pointer
 * @accept: pointer
 *
 * Return: the number of bytes in the initial segment of s
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int count = 0;
	char *p;
	char *a;

	for (p = s; *p != '\0'; p++)
	{
		for (a = accept; *a != '\0'; a++)
		{
			if (*p == *a)
			{
				count++;
				break;
			}
		}
		if (*a == '\0')
		{
			return (count);
		}
	}

	return (count);
}
4-isalpha.c/    0           0     0     644     269       `
#include "main.h"

/**
 *_isalpha - checks for alphabetic character
 * @c: the character to be checked
 * Return: 1 if c is a letter, 0 otherwise
 */
int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
	{
		return (1);
	}
	else
		return (0);
}

4-strpbrk.c/    0           0     0     644     372       `
#include "main.h"

/**
 * _strpbrk -  function that searches a string for any of a set of bytes.
 * @s: string
 * @accept: pointer
 *
 * Return: a pointer to the byte in s
 */
char *_strpbrk(char *s, char *accept)
{
	char *p;

	while (*s != '\0')
	{
		p = accept;
		while (*p != '\0')
		{
			if (*s == *p)
			{
				return (s);
			}
			p++;
		}
		s++;
	}
	return ('\0');
}
5-strstr.c/     0           0     0     644     484       `
#include "main.h"

/**
 * _strstr - a function that locates a substring.
 * @haystack: string
 * @needle: substring
 *
 * Return: a pointer to the beginning of the located substring.
 */
char *_strstr(char *haystack, char *needle)
{
	char *p1;
	char *p2;

	while (*haystack != '\0')
	{
		p1 = haystack;
		p2 = needle;

		while (*haystack != '\0' &&  *p2 != '\0' && *haystack == *p2)
		{
			haystack++;
			p2++;
		}

		if (!*p2)
			return (p1);

		haystack = p1 + 1;
	}
	return (0);
}
6-abs.c/        0           0     0     644     207       `
#include "main.h"

/**
 * _abs - computes the absolute value of an integer
 * @n: the int to check
 * Return: the absolute value of int
 */
int _abs(int n)
{
	if (n >= 0)
	{
		return (n);
	}
	return (-n);
}

9-strcpy.c/     0           0     0     644     457       `
#include "main.h"

/**
 * *_strcpy - that copies the string pointed to by src,
 * including the terminating null byte (\0),
 * to the buffer pointed to by dest.
 * @dest: pointer to the buffer.
 * @src: string to be copied.
 *
 * Return: the pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
	int len, i;

	len = 0;

	while (src[len] != '\0')
	{
		len++;
	}

	for (i = 0; i < len; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';

	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

